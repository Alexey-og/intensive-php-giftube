<?xml version="1.0" encoding="utf-8"?>
<examples>
  <example name="Переменные" index="1">
    <files>
      <file name="variables.php" main="true" show="true">
        <intro order="1">В этой демонстрации посмотрим как обьявлять переменные в зависимости от их типа. Переменные также
        можно переопределять и выводить их значение на экран.</intro>
        <states>
          <state order="2">Можно объявить переменную и не присваивать ей никакого значения. Но обычно так не делается.</state>
          <state order="3">Строковый тип - это отдельные слова и целые предложения. Такой тип данных необходимо
            заключать в кавычки.</state>
          <state order="4">Переменная также может хранить число. Числа в кавычках не нуждаются.</state>
          <state order="5">Существует специальный тип - булевый. Он содержит ложь или истину; они обозначаются как false
            или true. Этот тип также не нужно заключать в кавычки.</state>
          <state order="6">Переменные так называются, потому что могут менять свое значение. Например, прибавим число
          пять к уже существующему значению в переменной $items_count</state>
          <state order="7">Складывать можно не только числа, но и строки. Сложение строк называется конкатенацией.
          Используйте оператор "точка", чтобы сложить две строки.</state>
          <state order="8" reload="true">Содержимое переменной можно вывести на экран. Самый простой способ сделать это - использовать
          функцию print().</state>
          <state order="9" reload="true">Вместе со значением переменной можно вывести дополнительную информацию - её тип и размер.</state>
        </states>
      </file>
    </files>
  </example>
  <example name="Условные конструкции" index="2">
    <files>
      <file name="conditions.php" main="true" show="true">
        <intro order="1">Если бы почта России занималась электронной почтой… Давайте поможем нашей почте и с
        помощью условных конструкций будем показывать статус работы их интернет представительства.</intro>
        <states>
          <state order="2">Для начала определимся с текущим временем. Узнаем который сейчас час и порядковый
            номер дня недели.</state>
          <state order="3">В этой переменной будет храниться приветствие для каждого посетителя сайта почты России.</state>
          <state order="4">Здесь мы проверяем, что текущий день является выходным. Суббота и воскресение этой
          пятый и шестой день недели соответственно.</state>
          <state order="5">Эта часть условия выполнится, если сегодня будний день.</state>
          <state order="6">Обед - это святое. В обед почта не работает, потому сообщаем о данном факте пользователю.</state>
          <state order="7">Рабочие часы почты с 9 до 18. Поэтому проверяем, что текущий час больше восьми и
          одновременно меньше девятнадцати.</state>
          <state order="8">Последний блок условия отработает, если вам не повезло успеть в рабочее время.</state>
          <state order="9" reload="true">Заключительным шагом сообщим посетителю о статусе работы интернет-филиала.</state>
        </states>
      </file>
    </files>
  </example>
  <example name="Интеграция PHP с версткой" index="3">
    <files>
      <file name="index.php" main="true" show="true">
        <intro order="1">PHP-сценарии можно очень легко встраивать в существующую верстку. Главное не забывать про
        открывающие и закрывающие PHP-теги, внутри которых располагается весь код.</intro>
        <states>
          <state order="2" reload="true">Вначале определим все переменные, которые будут использованы в верстке этой страницы.
          Переменную из одного блока кода можно использовать в любом из следующих блоков.</state>
          <state order="3" reload="true">Это сокращаенный синтаксис вывода переменной. Здесь мы подставляем переменную внутри тега
          title.</state>
          <state order="4" reload="true">С помощью переменных можно влиять на оформление страницы. В данном примере мы поместили
          в переменную имя CSS класса.</state>
          <state order="5" reload="true">Посмотрите как работает сокращенный синтаксис условных конструкций. Здесь блок с превью
          гифки будет скрыт или показан в зависимости от значения переменной $show_gif.</state>
          <state order="6" reload="true">Используем одну переменную для показа ссылки на адрес элеткронной почты.</state>
        </states>
      </file>
    </files>
  </example>
  <example name="Логические выражения" index="4">
    <files>
      <file name="exp.php" main="true" show="true">
        <intro order="1">
          Рассмотрим работу с логическими выражениями. Результат работы логических выражений: истина или ложь.
        </intro>
        <states>
          <state order="2" reload="true">
            В логических выражениях используются операторы сравнения. Например, можно сравнить две разные строки на их
            равенство и убедиться в том, что они разные.
          </state>
          <state order="3" reload="true">
            Оператор неравенства в этом случае вернет истину, т.к. условие "строки не равны" соблюдается
          </state>
          <state order="4" reload="true">
            Сравнивать можно не только строки, но и числа. Здесь используется оператор "больше" и выражение будет
            истиной, если первое число больше второго.
          </state>
          <state order="5" reload="true">
            Чуть более сложный пример. Здесь мы получаем остаток от деления числа на два. Если остаток равен нулю,
            значит это число четное.
          </state>
        </states>
      </file>
      <file name="complex_exp.php" main="false" show="true">
        <intro order="6">
          Простые логические выражения можно объединять и делать их составными. Для объединений используют
          специальные логические операторы: "И", "ИЛИ".
        </intro>
        <states>
          <state order="7" reload="true">
            Логический оператор "and" работает так: выражение будет истинным тогда и только тогда,  когда оба исходных
            выражения истинны. Здесь оба операнда ложны, поэтому всё выражение будет ложным.
          </state>
          <state order="8" reload="true">
            Пример посложнее. Вначале вычисляются простые выражения слева и справа от оператора and. Если результат
            хотя бы одного из двух этих выражений будет ложным, то всё общее выражение тоже станет ложным.
          </state>
          <state order="9" reload="true">
            В этом примере используется оператор "or": выражение будет истинным, когда хотя бы одно  из двух образующих
            истинно. Будет ложным, только если оба составляющих  высказывания являются ложью. В данном случае общий
            результат ложь, потому что оба вложенных выражения ложны.
          </state>
        </states>
      </file>
    </files>
  </example>
</examples>
