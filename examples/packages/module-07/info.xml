<?xml version="1.0" encoding="utf-8" ?>
<examples>
  <example name="Счетчик посещений" index="1">
    <description>
      Сделаем простой счетчик, который будет показывать сколько раз пользователь загружал эту страницу.
      Для хранения числа визитов используем куки, а затем сессию.
    </description>
    <files>
      <file name="cookie.php" main="true" show="true">
        <intro order="1">Сделаем простой счетчик, который будет показывать сколько раз пользователь загружал эту страницу.
          Для хранения числа визитов используем куки, а затем сессию.
        </intro>
        <states>
          <state order="2">Определимся как будет называться наша кука для хранения счетчика</state>
          <state order="3">Установим начальное значение счетчика - одно посещение</state>
          <state order="4">Кука будет жить ровно 30 дней. Функция strtotime переводит дату в TIMESTAMP формат</state>
          <state order="5">Путь на сайте, по которому будет доступна кука. Слеш означает весь сайт</state>
          <state order="6">Проверяем существование куки с этим именем. Если кука существует, то получаем её значение
            в переменную и увеличиваем это значение на единицу.
          </state>
          <state order="7">Устанавливаем куку с помощью функции setcookie. Эта функция создаст новую куку, или
            обновит значение существующей.
          </state>
          <state order="8" reload="true">Посмотрим что у нас получилось! Выведем значение счетчика на страницу.</state>
        </states>
      </file>
      <file name="session.php" show="true" main="false">
        <intro order="9">Точно такой же счетчик можно сделать из без использования cookies.
          Хранить информацию между запросами также умеют PHP-сессии.
        </intro>
        <states>
          <state order="10">Если в сценарии мы собираемся работать с сессиями, то очень важно не забывать вызвать в
            начале функцию session_start(). Эта функция подготовливает сессии к работе.
          </state>
          <state order="11">Проверяем существование сессии с именем visit_count. Если такая сессия существует, то
            получаем её значение и прибавляем к нему единицу.
          </state>
          <state order="12" reload="true">Записываем новое значение счетчика обратно в сессию и показываем его на
            экране
          </state>
        </states>
      </file>
    </files>
  </example>
  <example name="Аутентификация" index="2">
    <description>
      Сделаем форму входа на сайт. Научимся проверять пароль пользователя и выполнять аутентификацию.
    </description>
    files
    <files>
      <file name="enter.php" main="true" show="true">
        <intro order="1">Сделаем форму входа на сайт. Научимся проверять пароль пользователя и выполнять
          аутентификацию.</intro>
        <states>
          <state order="5">Проверяем, что форма была отправлена</state>
          <state order="6">Определяем обязательные для заполнения поля, а также массив,
            где будут храниться ошибки
          </state>
          <state order="7">Проверяем все поля на заполненность</state>
          <state order="8">Найдем в таблице users пользователя с переданным
            email.
          </state>
          <state order="9">Проверяем, что сохраненный хеш пароля и введенный пароль из формы совпадают. Если совпадение
            есть, значит пользователь указал верный пароль. Тогда мы можем открыть для него сессию и записать
            в неё все данные о пользователе
          </state>
          <state order="10">В противном случае пароль неверный и мы добавляем сообщение об этом в список ошибок</state>
          <state order="11">Если пользователь не найден, то записываем это как ошибку валидации
          </state>
          <state order="12">Если были ошибки, значит мы снова должны показать форму входа, передав в шаблон список
            полученных ошибок
          </state>
          <state order="14">Если ошибок нет, значит аутентификация прошла успешно и пользователя можно
            перенаправить на главную страницу
          </state>
          <state order="15">Если форма не была отправлена, то проверяем существование сессии с пользователем.
            Сессия есть - значит пользователь залогинен и ему можно показать главную страницу.
            Сессии нет - показываем форму для входа на сайт.
          </state>
          <state order="16" reload="true">Подключаем лейаут и выводим его на экран</state>
        </states>
      </file>
      <file name="templates/enter.php" show="true" main="false">
        <intro order="13">Шаблон формы входа. Здесь предусмотрено выделение ошибочно заполненных полей -
        это необходимая часть валидации.</intro>
        <states/>
      </file>
      <file name="templates/layout.php" show="false" main="false">
        <states/>
      </file>
      <file name="init.php" show="true" main="false">
        <intro order="17">Мы немного поменяли init.php и добавили в его начало старт сессии, чтобы не писать это в
          каждом сценарии</intro>
        <states/>
      </file>
      <file name="logout.php" show="true" main="false">
        <intro order="18">Это сценарий, который разлогинит пользователя с сайта.</intro>
        <states>
          <state order="19">Чтобы очистить сессию можно просто присвоить ей пустой массив</state>
          <state order="20">После этого разлогиненного пользователя просто редиректим на главную страницу</state>
        </states>
      </file>
    </files>
  </example>
  <example name="Регистрация пользователя" index="3">
    <description>to do</description>
    <files>
      <file name="register.php" main="true" show="true">
        <intro order="1">Сделаем страницу для регистрации, где пользователь сможет завести себе аккаунт на нашем сайте.</intro>
        <states>
          <state order="2">Проверим существование пользователя с email из формы. Для этого выполним запрос на
          поиск записи в таблице пользователей по переданному email.</state>
          <state order="3">Если запрос вернул больше нуля записей, значит такой поьзователь уже существует.</state>
          <state order="4">Добавим нового пользователя в БД. Чтобы не хранить пароль в открытом виде преобразуем его
          в хеш.</state>
          <state order="5">Редирект на страницу входа, если пользователь был успешно добавлен в БД.</state>
          <state order="6">Передадим в шаблон список ошибок и данные из формы</state>
        </states>
      </file>
      <file name="templates/reg.php" main="false" show="true">
        <intro order="7">Шаблон с формой регистрации</intro>
        <states>
        </states>
      </file>
      <file name="init.php" show="true" main="false">
        <intro order="8">Мы немного поменяли init.php и добавили в его начало старт сессии, чтобы не писать это в
          каждом сценарии</intro>
        <states/>
      </file>
    </files>
  </example>
  <example name="Капча на сессиях" index="4">
    <description>to do</description>
    <files>
      <file name="index.php" main="false" show="true">
        <intro order="17">Напишем сценарий, который отвечает за показ комментария и обработку формы. Здесь также будет
        происходить проверка введенного пользователем ответа на капчу.</intro>
        <states>
          <state order="18">Проверяем отправку формы</state>
          <state order="19">Получаем из формы ответ на капчу</state>
          <state order="20">Сравниваем ответ пользователя с оригинальным текстом капчи</state>
          <state order="21">Если капча разгадана верно, то добавляем комментарий пользователя в массив для показа</state>
          <state order="22">Если пользователь ввел неверный ответ, то добавляем это в массив с ошибками</state>
          <state order="23">Подключаем шаблон с формой и передаем туда ошибки и введенный текст комментария</state>
          <state order="29" reload="true">Выводим содержимое лейаута на экран</state>
        </states>
      </file>
      <file name="captcha.php" main="true" show="true">
        <intro order="1">Добавим капчу к форме отправки комментария. Для этого понадобится написать две функции: генерация
         изображения капчи и генерация случайного текста для неё.</intro>
        <states>
          <state order="2">Напишем функцию генерации капчи. На вход она будет принимать текст капчи, её размеры и уровень
          "зашумленности".</state>
          <state order="3">Начнем с определения цветов для фона, текста и шума</state>
          <state order="4">Создадим ресурс изображения с заданными размерами</state>
          <state order="5">Определим ресурсы цветов для фона, текста и шума</state>
          <state order="6">Зальем изображение фоновым цветом и добавим туда текст</state>
          <state order="7">Теперь добавим шум. Для этого поместим на изображение пикселы в случайных местах. Количество
          пикселов берется из аргумента "уровень зашумленности"</state>
          <state order="8">Преобразуем получившийся ресурс изображения в формат PNG и выведем его на экран</state>
          <state order="9">Теперь добавим функцию для генерации случайной последовательности символом. Длина строки
          берется из аргумента</state>
          <state order="10">Определим последовательность символов, которые используем для генерации и преобразуем в массив</state>
          <state order="11">Получим массив из случайных символов.</state>
          <state order="12">Переводим массив в строку и возвращаем результат</state>
        </states>
      </file>
      <file name="showcaptcha.php" main="false" show="true">
        <intro order="13">Этот сценарий используется для показа капчи</intro>
        <states>
          <state order="14">Получаем текст для капчи</state>
          <state order="15">Сохраняем текст капчи в сессии</state>
          <state order="16" reload="true">Генерируем капчу и выводим её на экран. Добавим текущее время, чтобы браузер
          не кэшировал картинку</state>
        </states>
      </file>
      <file name="templates/layout.php" main="false" show="false">
        <states/>
      </file>
      <file name="templates/view.php" main="false" show="true">
        <intro order="24">Шаблон для показа комментариев и формы с добавлением нового</intro>
        <states>
          <state order="25">Определим контейнер, куда поместим показ капчи и поле для ввода ответа</state>
          <state order="26">Определим имя класса для подсвечивания красным поля, если капча разгадана неверно</state>
          <state order="27" reload="true">Поместим поле, куда нужно вводить ответ на капчу</state>
          <state order="28" reload="true">Покажем саму капчу в виде изображения. Ссылка на изображение - это наш сценарий, который
            генерирует капчу, сохраняет сессию и выводит содержимое изображения</state>
        </states>
      </file>
    </files>
  </example>
</examples>
